import { Service } from '@/common/domain/Service';

export type ServiceProjection =
  | 'aop-logging'
  | 'angular'
  | 'download'
  | 'initialization'
  | 'frontend-maven-plugin'
  | 'jacoco-check-minimal-coverage'
  | 'java-base'
  | 'logstash'
  | 'maven-java'
  | 'mariadb'
  | 'mysql'
  | 'mongodb'
  | 'mongock'
  | 'postgresql'
  | 'sonar-java-backend'
  | 'sonar-java-backend-and-frontend'
  | 'spring-boot'
  | 'spring-boot-actuator'
  | 'spring-boot-jwt'
  | 'spring-boot-jwt-with-basic-authentication'
  | 'spring-boot-mvc-with-tomcat'
  | 'spring-boot-webflux-netty'
  | 'react'
  | 'react-styled'
  | 'vue'
  | 'vue-styled'
  | 'unknown';

export const toServiceProjection = (service: Service): ServiceProjection => {
  switch (service) {
    case Service.AOP_LOGGING:
      return 'aop-logging';
    case Service.ANGULAR:
      return 'angular';
    case Service.DOWNLOAD:
      return 'download';
    case Service.INITIALIZATION:
      return 'initialization';
    case Service.FRONTEND_MAVEN_PLUGIN:
      return 'frontend-maven-plugin';
    case Service.JACOCO_CHECK_MINIMAL_COVERAGE:
      return 'jacoco-check-minimal-coverage';
    case Service.JAVA_BASE:
      return 'java-base';
    case Service.LOGSTASH:
      return 'logstash';
    case Service.MAVEN_JAVA:
      return 'maven-java';
    case Service.MARIADB:
      return 'mariadb';
    case Service.MYSQL:
      return 'mysql';
    case Service.MONGODB:
      return 'mongodb';
    case Service.MONGOCK:
      return 'mongock';
    case Service.POSTGRESQL:
      return 'postgresql';
    case Service.SONAR_JAVA_BACKEND:
      return 'sonar-java-backend';
    case Service.SONAR_JAVA_BACKEND_AND_FRONTEND:
      return 'sonar-java-backend-and-frontend';
    case Service.SPRINGBOOT:
      return 'spring-boot';
    case Service.SPRINGBOOT_ACTUATOR:
      return 'spring-boot-actuator';
    case Service.SPRINGBOOT_JWT:
      return 'spring-boot-jwt';
    case Service.SPRINGBOOT_JWT_WITH_BASIC_AUTHENTICATION:
      return 'spring-boot-jwt-with-basic-authentication';
    case Service.SPRINGBOOT_MVC_WITH_TOMCAT:
      return 'spring-boot-mvc-with-tomcat';
    case Service.SPRINGBOOT_WEBFLUX_NETTY:
      return 'spring-boot-webflux-netty';
    case Service.REACT:
      return 'react';
    case Service.REACT_STYLED:
      return 'react-styled';
    case Service.VUE:
      return 'vue';
    case Service.VUE_STYLED:
      return 'vue-styled';
    case Service.UNKNOWN:
      return 'unknown';
  }
};

export const fromServiceProjection = (serviceProjection: ServiceProjection): Service => {
  switch (serviceProjection) {
    case 'aop-logging':
      return Service.AOP_LOGGING;
    case 'angular':
      return Service.ANGULAR;
    case 'download':
      return Service.DOWNLOAD;
    case 'initialization':
      return Service.INITIALIZATION;
    case 'frontend-maven-plugin':
      return Service.FRONTEND_MAVEN_PLUGIN;
    case 'jacoco-check-minimal-coverage':
      return Service.JACOCO_CHECK_MINIMAL_COVERAGE;
    case 'java-base':
      return Service.JAVA_BASE;
    case 'logstash':
      return Service.LOGSTASH;
    case 'maven-java':
      return Service.MAVEN_JAVA;
    case 'mariadb':
      return Service.MARIADB;
    case 'mysql':
      return Service.MYSQL;
    case 'mongodb':
      return Service.MONGODB;
    case 'mongock':
      return Service.MONGOCK;
    case 'postgresql':
      return Service.POSTGRESQL;
    case 'sonar-java-backend':
      return Service.SONAR_JAVA_BACKEND;
    case 'sonar-java-backend-and-frontend':
      return Service.SONAR_JAVA_BACKEND_AND_FRONTEND;
    case 'spring-boot':
      return Service.SPRINGBOOT;
    case 'spring-boot-actuator':
      return Service.SPRINGBOOT_ACTUATOR;
    case 'spring-boot-jwt':
      return Service.SPRINGBOOT_JWT;
    case 'spring-boot-jwt-with-basic-authentication':
      return Service.SPRINGBOOT_JWT_WITH_BASIC_AUTHENTICATION;
    case 'spring-boot-mvc-with-tomcat':
      return Service.SPRINGBOOT_MVC_WITH_TOMCAT;
    case 'spring-boot-webflux-netty':
      return Service.SPRINGBOOT_WEBFLUX_NETTY;
    case 'react':
      return Service.REACT;
    case 'react-styled':
      return Service.REACT_STYLED;
    case 'vue':
      return Service.VUE;
    case 'vue-styled':
      return Service.VUE_STYLED;
    case 'unknown':
      return Service.UNKNOWN;
  }
};
