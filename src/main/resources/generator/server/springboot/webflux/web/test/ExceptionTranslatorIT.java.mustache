package {{packageName}}.technical.infrastructure.primary.exception;

import static org.springframework.http.MediaType.APPLICATION_PROBLEM_JSON_VALUE;
import static {{packageName}}.technical.infrastructure.primary.exception.ExceptionTranslatorTestController.TestDataDTO;

import java.util.List;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.ApplicationContext;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.reactive.server.WebTestClient;
import org.springframework.web.reactive.function.BodyInserters;
import {{packageName}}.IntegrationTest;

/**
 * Integration tests {@link ExceptionTranslator} controller advice.
 */
@IntegrationTest
@AutoConfigureWebTestClient
class ExceptionTranslatorIT {

  @Autowired
  ApplicationContext applicationContext;

  @Autowired
  private WebTestClient webTestClient;

  ExceptionTranslator exceptionTranslator;

  @BeforeEach
  void setUp() {
    if (applicationContext.containsBean("securityExceptionTranslator")) {
      exceptionTranslator = (ExceptionTranslator) applicationContext.getBean("securityExceptionTranslator");
    } else {
      exceptionTranslator = (ExceptionTranslator) applicationContext.getBean("exceptionTranslator");
    }
  }

  @Test
  void shouldHandleMethodArgumentNotValid() {
    webTestClient
      .post()
      .uri("/api/exception-translator-test/method-argument")
      .body(BodyInserters.fromValue(new TestDataDTO()))
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(APPLICATION_PROBLEM_JSON_VALUE)
      .expectBody()
      .jsonPath("$.title").isEqualTo("Data binding and validation failure")
      .jsonPath("$.message").isEqualTo(ErrorConstants.ERR_VALIDATION)
      .jsonPath("$.fieldErrors").value(Matchers.hasSize(1))
      .jsonPath("$.fieldErrors.[0].objectName").isEqualTo("testDataDTOMono")
      .jsonPath("$.fieldErrors.[0].field").isEqualTo("fieldName")
      .jsonPath("$.fieldErrors.[0].message").isEqualTo("must not be null");
  }

  @Test
  void shouldHandleMissingServletRequestPartException() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/missing-servlet-request-part")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.400")
      .jsonPath("$.title").isEqualTo("Bad Request")
      .jsonPath("$.detail").isEqualTo("400 BAD_REQUEST \"Required request part 'part' is not present\"");
  }

  @Test
  void shouldHandleMissingServletRequestParameterException() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/missing-servlet-request-parameter")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.400")
      .jsonPath("$.title").isEqualTo("Bad Request")
      .jsonPath("$.detail").isEqualTo("400 BAD_REQUEST \"Required String parameter 'param' is not present\"");
  }

  @Test
  void shouldHandleCustomExceptionWithResponseStatusWithoutDetails() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/response-status")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.400")
      .jsonPath("$.title").isEqualTo("test response status reason")
      .jsonPath("$.detail").doesNotExist();
  }

  @Test
  void shouldHandleInternalServerErrorWithoutDetails() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/internal-server-error")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").doesNotExist();
  }

  @Test
  void shouldHandleBadRequestErrorWithoutDetails() {
    webTestClient
      .get()
      .uri("/api/exception-translator-test/bad-request-error")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isBadRequest()
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.400")
      .jsonPath("$.title").isEqualTo("Bad request error")
      .jsonPath("$.detail").doesNotExist();
  }

  @Test
  void shouldHandleHttpMessageConversionException() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", false);

    webTestClient
      .get()
      .uri("/api/exception-translator-test/http-message-conversion-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("Unable to convert http message");
  }

  @Test
  void shouldHandleHttpMessageConversionExceptionWithDetails() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", true);

    webTestClient
      .get()
      .uri("/api/exception-translator-test/http-message-conversion-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("beer");
  }

  @Test
  void shouldHandleExceptionContainsPackageNameWithGenericDetail() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", false);
    ReflectionTestUtils.setField(exceptionTranslator, "packages", List.of("org.", "java."));

    webTestClient
      .get()
      .uri("/api/exception-translator-test/null-pointer-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("Unexpected runtime exception");
  }

  @Test
  void shouldHandleExceptionContainsPackageNameWithNullPackagesWithDetail() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", false);
    ReflectionTestUtils.setField(exceptionTranslator, "packages", null);

    webTestClient
      .get()
      .uri("/api/exception-translator-test/null-pointer-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("java.lang.NullPointerException");
  }

  @Test
  void shouldHandleExceptionContainsPackageNameWithEmptyPackagesWithDetail() {
    ReflectionTestUtils.setField(exceptionTranslator, "exceptionWithDetails", false);
    ReflectionTestUtils.setField(exceptionTranslator, "packages", List.of());

    webTestClient
      .get()
      .uri("/api/exception-translator-test/null-pointer-exception")
      .accept(MediaType.APPLICATION_JSON)
      .exchange()
      .expectStatus()
      .isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
      .expectHeader()
      .contentType(MediaType.APPLICATION_PROBLEM_JSON)
      .expectBody()
      .jsonPath("$.message").isEqualTo("error.http.500")
      .jsonPath("$.title").isEqualTo("Internal Server Error")
      .jsonPath("$.detail").isEqualTo("java.lang.NullPointerException");
  }

  // jhipster-needle-exception-translator-it
}
