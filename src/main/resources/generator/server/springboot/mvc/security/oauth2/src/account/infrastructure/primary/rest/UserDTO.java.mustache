package {{packageName}}.account.infrastructure.primary.rest;

import static {{packageName}}.account.domain.AccountConstants.*;

import java.time.Instant;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import {{packageName}}.security.oauth2.application.SecurityUtils;

public class UserDTO {

  private String id;
  private String login;
  private String firstName;
  private String lastName;
  private String email;
  private String imageUrl;
  private boolean activated = false;
  private String langKey;
  private Instant createdDate;
  private Instant lastModifiedDate;
  private Set<String> authorities;

  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public String getLogin() {
    return login;
  }

  public void setLogin(String login) {
    this.login = login;
  }

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }

  public boolean isActivated() {
    return activated;
  }

  public void setActivated(boolean activated) {
    this.activated = activated;
  }

  public String getLangKey() {
    return langKey;
  }

  public void setLangKey(String langKey) {
    this.langKey = langKey;
  }

  public Instant getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Instant createdDate) {
    this.createdDate = createdDate;
  }

  public Instant getLastModifiedDate() {
    return lastModifiedDate;
  }

  public void setLastModifiedDate(Instant lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
  }

  public Set<String> getAuthorities() {
    return authorities;
  }

  public void setAuthorities(Set<String> authorities) {
    this.authorities = authorities;
  }

  public UserDTO id(String id) {
    this.id = id;
    return this;
  }

  public UserDTO login(String login) {
    this.login = login;
    return this;
  }

  public UserDTO firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public UserDTO lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public UserDTO email(String email) {
    this.email = email;
    return this;
  }

  public UserDTO imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

  public UserDTO activated(boolean activated) {
    this.activated = activated;
    return this;
  }

  public UserDTO langKey(String langKey) {
    this.langKey = langKey;
    return this;
  }

  public UserDTO createdDate(Instant createdDate) {
    this.createdDate = createdDate;
    return this;
  }

  public UserDTO lastModifiedDate(Instant lastModifiedDate) {
    this.lastModifiedDate = lastModifiedDate;
    return this;
  }

  public UserDTO authorities(Set<String> authorities) {
    this.authorities = authorities;
    return this;
  }

  public static UserDTO getUserDTOFromToken(AbstractAuthenticationToken authToken) {
    UserDTO userDTO = getUserDTOFromAttributes(SecurityUtils.getAttributes(authToken));
    userDTO.setAuthorities(authToken.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toSet()));
    return userDTO;
  }

  private static UserDTO getUserDTOFromAttributes(Map<String, Object> details) {
    UserDTO user = new UserDTO();
    String sub = String.valueOf(details.get(SUB));

    // handle resource server JWT, where sub claim is email and uid is ID
    Optional
      .ofNullable(details.get(UID))
      .ifPresentOrElse(
        uid -> {
          user.setId((String) uid);
          user.setLogin(sub);
        },
        () -> user.setId(sub)
      );

    String username = Optional.ofNullable(details.get(PREFERRED_USERNAME)).map(s -> s.toString().toLowerCase()).orElse(null);
    user.setLogin(Optional.ofNullable(username).orElse(user.getId()));

    Optional.ofNullable(getFirstName(details)).ifPresent(user::setFirstName);

    Optional.ofNullable(details.get(FAMILY_NAME)).ifPresent(familyName -> user.setLastName((String) familyName));

    Optional
      .ofNullable(details.get(EMAIL_VERIFIED))
      .ifPresentOrElse(emailVerified -> user.setActivated((Boolean) emailVerified), () -> user.setActivated(Boolean.TRUE));

    if (details.get(EMAIL) != null) {
      user.setEmail(((String) details.get(EMAIL)).toLowerCase());
    } else if (checkAuth0(sub, username)) {
      // special handling for Auth0
      user.setEmail(username);
    } else {
      user.setEmail(sub);
    }
    if (details.get(LANG_KEY) != null) {
      user.setLangKey((String) details.get(LANG_KEY));
    } else if (details.get(LOCALE) != null) {
      user.setLangKey(getLocale(details));
    } else {
      // set langKey to default if not specified by IdP
      user.setLangKey(DEFAULT_LANGUAGE);
    }

    Optional.ofNullable(details.get(PICTURE)).ifPresent(picture -> user.setImageUrl((String) picture));
    return user;
  }

  private static boolean checkAuth0(String sub, String username) {
    return sub.contains("|") && username != null && username.contains("@");
  }

  private static String getLocale(Map<String, Object> details) {
    // trim off country code if it exists
    String locale = (String) details.get(LOCALE);
    if (locale.contains("_")) {
      locale = locale.substring(0, locale.indexOf('_'));
    } else if (locale.contains("-")) {
      locale = locale.substring(0, locale.indexOf('-'));
    }
    return locale.toLowerCase();
  }

  private static String getFirstName(Map<String, Object> details) {
    if (details.get(GIVEN_NAME) != null) {
      return (String) details.get(GIVEN_NAME);
    } else if (details.get(NAME) != null) {
      return (String) details.get(NAME);
    }
    return null;
  }
}
