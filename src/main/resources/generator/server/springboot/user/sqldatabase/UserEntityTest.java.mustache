package {{packageName}}.user.infrastructure.secondary.{{sqlDatabaseName}};

import static org.assertj.core.api.Assertions.*;
import static org.assertj.core.api.Assertions.assertThat;

import java.time.Instant;
import java.util.HashSet;
import java.util.Set;
import org.junit.jupiter.api.Test;
import {{packageName}}.UnitTest;

@UnitTest
class UserEntityTest {

  @Test
  void shouldBuildWithSetters() {
    Instant creationInstant = Instant.ofEpochMilli(0L);
    Instant modificationInstant = Instant.ofEpochMilli(1000L);
    Instant resetInstant = Instant.ofEpochMilli(5000L);
    AuthorityEntity authority = new AuthorityEntity().setName("myAuthority");
    Set<AuthorityEntity> authorities = new HashSet<>();
    authorities.add(authority);

    UserEntity userEntity = new UserEntity();
    userEntity.setActivated(true);
    userEntity.setActivationKey("myActivationKey");
    userEntity.setAuthorities(authorities);
    userEntity.setCreatedBy("creator");
    userEntity.setCreatedDate(creationInstant);
    userEntity.setEmail("user@email.com");
    userEntity.setFirstName("myFirstName");
    userEntity.setLastName("myLastName");
    userEntity.setId(1L);
    userEntity.setImageUrl("myImageUrl");
    userEntity.setLangKey("fr");
    userEntity.setLastModifiedBy("modifier");
    userEntity.setLastModifiedDate(modificationInstant);
    userEntity.setLogin("myLogin");
    userEntity.setPassword("myPassword");
    userEntity.setResetDate(resetInstant);
    userEntity.setResetKey("myResetKey");

    assertThat(userEntity.isActivated()).isTrue();
    assertThat(userEntity.getActivationKey()).isEqualTo("myActivationKey");
    assertThat(userEntity.getAuthorities()).isEqualTo(authorities);
    assertThat(userEntity.getCreatedBy()).isEqualTo("creator");
    assertThat(userEntity.getCreatedDate()).isEqualTo(creationInstant);
    assertThat(userEntity.getEmail()).isEqualTo("user@email.com");
    assertThat(userEntity.getFirstName()).isEqualTo("myFirstName");
    assertThat(userEntity.getLastName()).isEqualTo("myLastName");
    assertThat(userEntity.getId()).isEqualTo(1L);
    assertThat(userEntity.getImageUrl()).isEqualTo("myImageUrl");
    assertThat(userEntity.getLangKey()).isEqualTo("fr");
    assertThat(userEntity.getLastModifiedBy()).isEqualTo("modifier");
    assertThat(userEntity.getLastModifiedDate()).isEqualTo(modificationInstant);
    assertThat(userEntity.getLogin()).isEqualTo("mylogin");
    assertThat(userEntity.getPassword()).isEqualTo("myPassword");
    assertThat(userEntity.getResetDate()).isEqualTo(resetInstant);
    assertThat(userEntity.getResetKey()).isEqualTo("myResetKey");

    // toString
    assertThat(userEntity.toString()).contains("myFirstName");
    assertThat(userEntity.toString()).doesNotContain("myPassword");

    // equals
    UserEntity otherEntity = new UserEntity().setId(2L);
    UserEntity otherEntityWithSameId = new UserEntity().setId(1L);
    UserEntity otherEntityWithNullId = new UserEntity().setId(null);

    assertThat(userEntity.equals(userEntity)).isTrue();
    assertThat(userEntity.equals(null)).isFalse();
    assertThat(userEntity.equals(otherEntity)).isFalse();
    assertThat(userEntity.equals(otherEntityWithSameId)).isTrue();
    assertThat(otherEntityWithNullId.equals(userEntity)).isFalse();

    // hasCode
    assertThat(userEntity.hashCode()).isEqualTo(userEntity.getClass().hashCode());
  }

  @Test
  void shouldBuildWithFluentSetters() {
    Instant creationInstant = Instant.ofEpochMilli(0L);
    Instant modificationInstant = Instant.ofEpochMilli(1000L);
    Instant resetInstant = Instant.ofEpochMilli(5000L);
    AuthorityEntity authority = new AuthorityEntity().setName("myAuthority");
    Set<AuthorityEntity> authorities = new HashSet<>();
    authorities.add(authority);

    UserEntity userEntity = new UserEntity()
      .setActivated(false)
      .setActivationKey("myActivationKey")
      .setAuthorities(authorities)
      .setEmail("user@email.com")
      .setFirstName("myFirstName")
      .setLastName("myLastName")
      .setId(1L)
      .setImageUrl("myImageUrl")
      .setLangKey("fr")
      .setLogin("myLogin")
      .setPassword("myPassword")
      .setResetDate(resetInstant)
      .setResetKey("myResetKey");

    userEntity
      .setCreatedBy("creator")
      .setLastModifiedBy("modifier")
      .setLastModifiedDate(modificationInstant)
      .setCreatedDate(creationInstant);

    assertThat(userEntity.isActivated()).isFalse();
    assertThat(userEntity.getActivationKey()).isEqualTo("myActivationKey");
    assertThat(userEntity.getAuthorities()).isEqualTo(authorities);
    assertThat(userEntity.getCreatedBy()).isEqualTo("creator");
    assertThat(userEntity.getCreatedDate()).isEqualTo(creationInstant);
    assertThat(userEntity.getEmail()).isEqualTo("user@email.com");
    assertThat(userEntity.getFirstName()).isEqualTo("myFirstName");
    assertThat(userEntity.getLastName()).isEqualTo("myLastName");
    assertThat(userEntity.getId()).isEqualTo(1L);
    assertThat(userEntity.getImageUrl()).isEqualTo("myImageUrl");
    assertThat(userEntity.getLangKey()).isEqualTo("fr");
    assertThat(userEntity.getLastModifiedBy()).isEqualTo("modifier");
    assertThat(userEntity.getLastModifiedDate()).isEqualTo(modificationInstant);
    assertThat(userEntity.getLogin()).isEqualTo("mylogin");
    assertThat(userEntity.getPassword()).isEqualTo("myPassword");
    assertThat(userEntity.getResetDate()).isEqualTo(resetInstant);
    assertThat(userEntity.getResetKey()).isEqualTo("myResetKey");
  }
}
