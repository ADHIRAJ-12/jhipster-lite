package {{packageName}}.dummy.infrastructure.primary.kafka.consumer;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.springframework.stereotype.Service;

@Service
public class DummyConsumer extends AbstractConsumer<String> {

  private final Logger log = LoggerFactory.getLogger(DummyConsumer.class);

  public DummyConsumer(
    @Value("${kafka.topic.dummy}") final String topicName,
    @Value("${kafka.polling.timeout}") final int pollingTimeout,
    final KafkaConsumer<String, String> kafkaConsumer
  ) {
    super(topicName, pollingTimeout, kafkaConsumer);
  }

  @Override
  protected boolean handleMessage(final ConsumerRecord<String, String> record) {
    // TODO /!\ Maybe you could delete the next log calls to avoid disclosing personal user information

    final String value = record.value();

    if (value == null) {
      log.error("Null value in record {}", record);
      return false;
    }

    log.info("Handling record: {}", value);
    // TODO: Here is where you can handle your records
    return true;
  }

  @Bean
  public void executeKafkaRunner() {
    final ThreadPoolTaskExecutor threadPoolTaskExecutor = new ThreadPoolTaskExecutor();
    threadPoolTaskExecutor.initialize();
    threadPoolTaskExecutor.execute(this);
  }
}
