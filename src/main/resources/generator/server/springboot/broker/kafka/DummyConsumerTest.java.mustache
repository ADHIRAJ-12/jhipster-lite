package {{packageName}}.dummy.infrastructure.primary.kafka.consumer;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.time.Duration;
import java.util.*;
import javax.swing.Timer;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.TopicPartition;
import org.apache.kafka.common.errors.WakeupException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import {{packageName}}.UnitTest;

@UnitTest
@ExtendWith(MockitoExtension.class)
class DummyConsumerTest {

  @Mock
  private KafkaConsumer<String, String> consumer;

  private DummyConsumer dummyConsumer;

  @BeforeEach
  public void setUp() throws InvocationTargetException, IllegalAccessException, NoSuchMethodException {
    dummyConsumer = new DummyConsumer("queue.jhipster.dummy", 10_000, consumer);

    Method postConstructInit = DummyConsumer.class.getDeclaredMethod("init");
    postConstructInit.setAccessible(true);
    postConstructInit.invoke(dummyConsumer);

    Method postConstructDestroy = DummyConsumer.class.getDeclaredMethod("destroy");
    postConstructDestroy.setAccessible(true);
    postConstructDestroy.invoke(dummyConsumer);
  }

  @Test
  void shouldHandleMessage() {
    ConsumerRecord<String, String> record = new ConsumerRecord<>("queue.jhipster.dummy", 0, 0, null, "dummy message");
    boolean actualResult = dummyConsumer.handleMessage(record);
    assertEquals(true, actualResult);
  }

  @Test
  void shouldNotHandleMessage() {
    ConsumerRecord<String, String> record = new ConsumerRecord<>("queue.jhipster.dummy", 0, 0, null, null);
    boolean actualResult = dummyConsumer.handleMessage(record);
    assertEquals(false, actualResult);
  }

  @Test
  void shouldExecuteKafkaRunner() {
    Map<TopicPartition, List<ConsumerRecord<String, String>>> recordsMap = new HashMap<>();
    List<ConsumerRecord<String, String>> recordsList = new ArrayList<>();
    recordsList.add(new ConsumerRecord<>("queue.jhipster.dummy", 0, 0, null, "dummy message"));
    recordsMap.put(new TopicPartition("queue.jhipster", 0), recordsList);
    ConsumerRecords<String, String> records = new ConsumerRecords(recordsMap);
    when(consumer.poll(Duration.ofMillis(10000))).thenReturn(records);
    dummyConsumer.setClosed(false);

    dummyConsumer.executeKafkaRunner();

    new Timer(3000, actionEvent -> System.out.println()).start();

    verify(consumer, atLeastOnce()).subscribe(Collections.singleton("queue.jhipster.dummy"));
  }

  @Test
  void shouldExecuteKafkaRunnerNotPolling() {
    dummyConsumer.setClosed(true);

    dummyConsumer.executeKafkaRunner();

    new Timer(3000, actionEvent -> System.out.println()).start();

    verify(consumer).subscribe(Collections.singleton("queue.jhipster.dummy"));
  }

  @Test
  void shouldThrowsException() {
    dummyConsumer.setClosed(false);
    when(consumer.poll(Duration.ofMillis(10000))).thenThrow(NullPointerException.class);

    dummyConsumer.executeKafkaRunner();

    new Timer(3000, actionEvent -> System.out.println()).start();

    verify(consumer).subscribe(Collections.singleton("queue.jhipster.dummy"));
  }

  @Test
  void shouldThrowsWakeupException() {
    dummyConsumer.setClosed(false);
    when(consumer.poll(Duration.ofMillis(10000))).thenThrow(WakeupException.class);

    dummyConsumer.executeKafkaRunner();

    new Timer(3000, actionEvent -> System.out.println()).start();

    verify(consumer).subscribe(Collections.singleton("queue.jhipster.dummy"));
  }

  @Test
  void shouldThrowsWakeupExceptionWithClosing() {
    dummyConsumer.setClosed(true);
    doThrow(WakeupException.class).when(consumer).subscribe(Collections.singleton("queue.jhipster.dummy"));

    dummyConsumer.executeKafkaRunner();

    new Timer(3000, actionEvent -> System.out.println()).start();

    verify(consumer).subscribe(Collections.singleton("queue.jhipster.dummy"));
  }

  @Test
  void shouldSetClosed() {
    dummyConsumer.setClosed(true);
    assertEquals(true, dummyConsumer.isClosed());
  }
}
